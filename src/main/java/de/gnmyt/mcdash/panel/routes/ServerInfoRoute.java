package de.gnmyt.mcdash.panel.routes;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ObjectNode;
import de.gnmyt.mcdash.api.handler.DefaultHandler;
import de.gnmyt.mcdash.api.http.Request;
import de.gnmyt.mcdash.api.http.ResponseController;
import okhttp3.OkHttpClient;
import org.apache.commons.io.FileUtils;
import org.bukkit.Bukkit;

import java.io.File;
import java.util.Base64;


public class ServerInfoRoute extends DefaultHandler {

    private final String ICON_BASE64 = "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";
    private String publicIp;

    public ServerInfoRoute() {
        try {
            publicIp = new OkHttpClient().newCall(new okhttp3.Request.Builder().url("https://api.ipify.org").build())
                    .execute().body().string();
        } catch (Exception e) {
            publicIp = (Bukkit.getIp().isEmpty() ? "localhost" : Bukkit.getIp());
        }
    }

    @Override
    public String path() {
        return "server";
    }

    @Override
    public void get(Request request, ResponseController response) throws Exception {

        String iconBase64;
        if (new File("server-icon.png").exists()) {
            byte[] iconBytes = FileUtils.readFileToByteArray(new File("server-icon.png"));
            iconBase64 = "data:image/png;base64," + Base64.getEncoder().encodeToString(iconBytes);
        } else {
            iconBase64 = "data:image/png;base64," + ICON_BASE64;
        }

        ObjectNode mapper = new ObjectMapper().createObjectNode()
                .put("software", Bukkit.getName())
                .put("version", Bukkit.getBukkitVersion())
                .put("ip", publicIp)
                .put("port", Bukkit.getPort())
                .put("motd", Bukkit.getMotd())
                .put("icon", iconBase64);

        response.header("Content-Type", "application/json").text(mapper.toString());
    }
}
